// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module CharacterSelectFSM(	// <stdin>:25:3
  input        clock,	// <stdin>:26:11
               reset,	// <stdin>:27:11
  input  [6:0] io_char0,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
               io_char1,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
               io_char2,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
               io_char3,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
  output [6:0] io_segments,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
  output [3:0] io_anodes	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:14:16
);

  reg [1:0]  posReg;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25
  reg [6:0]  hot_char_segments;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:34:27
  reg [3:0]  hot_char_anodes;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:35:25
  reg [31:0] refresh_counter;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:39:34
  always @(posedge clock) begin	// <stdin>:26:11
    automatic logic _GEN;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:43:26
    _GEN = refresh_counter == 32'h61A80;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:39:34, :43:26
    if (reset) begin	// <stdin>:26:11
      posReg <= 2'h0;	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25
      refresh_counter <= 32'h0;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:39:34
    end
    else if (_GEN) begin	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:43:26
      automatic logic [3:0][1:0] _GEN_0 = {2'h0, 2'h3, 2'h2, 2'h1};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :48:23, :52:24, :57:24, :62:24, :67:24
      posReg <= _GEN_0[posReg];	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :48:23, :52:24, :57:24, :62:24, :67:24
      refresh_counter <= 32'h0;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:39:34
    end
    else	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:43:26
      refresh_counter <= refresh_counter + 32'h1;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:39:34, :40:40
    if (_GEN) begin	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:43:26
      automatic logic [3:0][3:0] _GEN_1 = {4'h8, 4'h4, 4'h2, 4'h1};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:35:25, :48:23, :51:33, :56:33, :61:33, :66:33
      automatic logic [3:0][6:0] _GEN_2 =
        {{io_char3}, {io_char2}, {io_char1}, {io_char0}};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:34:27, :48:23, :50:35, :55:35, :60:35, :65:35
      hot_char_segments <= _GEN_2[posReg];	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :34:27, :48:23, :50:35, :55:35, :60:35, :65:35
      hot_char_anodes <= _GEN_1[posReg];	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :35:25, :48:23, :51:33, :56:33, :61:33, :66:33
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:25:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:25:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:25:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:25:3
      automatic logic [31:0] _RANDOM[0:1];	// <stdin>:25:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:25:3
        `INIT_RANDOM_PROLOG_	// <stdin>:25:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:25:3
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// <stdin>:25:3
        end	// <stdin>:25:3
        posReg = _RANDOM[1'h0][1:0];	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25
        hot_char_segments = _RANDOM[1'h0][8:2];	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :34:27
        hot_char_anodes = _RANDOM[1'h0][12:9];	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :35:25
        refresh_counter = {_RANDOM[1'h0][31:13], _RANDOM[1'h1][12:0]};	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:30:25, :39:34
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:25:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:25:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_segments = hot_char_segments;	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:34:27
  assign io_anodes = hot_char_anodes;	// <stdin>:25:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\DisplayDriver\\CharacterSelectFSM.scala:35:25
endmodule

module PlayerInput(	// <stdin>:73:3
  input        clock,	// <stdin>:74:11
               reset,	// <stdin>:75:11
  input  [3:0] io_buttons,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:18:16
  output [1:0] io_snake_direction	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:18:16
);

  reg [1:0] lastDirection;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32
  always @(posedge clock) begin	// <stdin>:74:11
    if (reset)	// <stdin>:74:11
      lastDirection <= 2'h0;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32
    else if (io_buttons[0])	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:36:20
      lastDirection <= 2'h0;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32
    else if (io_buttons[1])	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:39:26
      lastDirection <= 2'h1;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32, :40:28
    else if (io_buttons[2])	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:42:26
      lastDirection <= 2'h2;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32, :43:28
    else if (io_buttons[3])	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:45:26
      lastDirection <= 2'h3;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32, :46:28
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:73:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:73:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:73:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:73:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:73:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:73:3
        `INIT_RANDOM_PROLOG_	// <stdin>:73:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:73:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:73:3
        lastDirection = _RANDOM[/*Zero width*/ 1'b0][1:0];	// <stdin>:73:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:73:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:73:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_snake_direction =
    io_buttons[0]
      ? 2'h0
      : io_buttons[1]
          ? 2'h1
          : io_buttons[2] ? 2'h2 : io_buttons[3] ? 2'h3 : lastDirection;	// <stdin>:73:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\InputModule\\PlayerInput.scala:31:32, :36:{20,25}, :37:28, :39:{26,31}, :40:28, :42:{26,31}, :43:28, :45:{26,31}, :46:28, :49:28
endmodule

module simpleSnake(	// <stdin>:124:3
  input        clock,	// <stdin>:125:11
               reset,	// <stdin>:126:11
  input  [3:0] io_buttons,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:23:16
  output [6:0] io_segments,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:23:16
  output [3:0] io_anodes	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:23:16
);

  wire [1:0]      _playerInput_mod_io_snake_direction;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:42:33
  wire [6:0]      _characterSelect_io_segments;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:35:33
  wire [3:0]      _characterSelect_io_anodes;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:35:33
  wire [3:0][6:0] _GEN = {7'h0, 7'h76, 7'h4E, 7'h0};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:47:49, :52:21, :58:21, :64:21
  wire [3:0][6:0] _GEN_0 = {7'h4E, 7'h3E, 7'h76, 7'h67};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:31:23, :47:49, :51:21, :57:21, :63:21, :69:21
  wire [3:0][6:0] _GEN_1 = {7'h76, 7'h7E, 7'h5B, 7'h3E};	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:31:23, :47:49, :50:21, :56:21, :62:21, :68:21
  wire [6:0]      _io_segments_T = ~_characterSelect_io_segments;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:35:33, :102:30
  wire [3:0]      _io_anodes_T = ~_characterSelect_io_anodes;	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:35:33, :103:30
  CharacterSelectFSM characterSelect (	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:35:33
    .clock       (clock),
    .reset       (reset),
    .io_char0
      (_playerInput_mod_io_snake_direction == 2'h0
       | _playerInput_mod_io_snake_direction == 2'h1
         ? 7'h0
         : _playerInput_mod_io_snake_direction == 2'h2
             ? 7'h3D
             : (&_playerInput_mod_io_snake_direction) ? 7'h5B : 7'h0),	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:31:23, :42:33, :47:49, :49:21, :55:21, :56:21, :61:21, :67:21
    .io_char1    (_GEN_1[_playerInput_mod_io_snake_direction]),	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:31:23, :42:33, :47:49, :50:21, :56:21, :62:21, :68:21
    .io_char2    (_GEN_0[_playerInput_mod_io_snake_direction]),	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:31:23, :42:33, :47:49, :51:21, :57:21, :63:21, :69:21
    .io_char3    (_GEN[_playerInput_mod_io_snake_direction]),	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:42:33, :47:49, :52:21, :58:21, :64:21
    .io_segments (_characterSelect_io_segments),
    .io_anodes   (_characterSelect_io_anodes)
  );
  PlayerInput playerInput_mod (	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:42:33
    .clock              (clock),
    .reset              (reset),
    .io_buttons         (io_buttons),
    .io_snake_direction (_playerInput_mod_io_snake_direction)
  );
  assign io_segments =
    {_io_segments_T[0],
     _io_segments_T[1],
     _io_segments_T[2],
     _io_segments_T[3],
     _io_segments_T[4],
     _io_segments_T[5],
     _io_segments_T[6]};	// <stdin>:124:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:102:{29,30}
  assign io_anodes = {_io_anodes_T[0], _io_anodes_T[1], _io_anodes_T[2], _io_anodes_T[3]};	// <stdin>:124:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:103:{29,30}
endmodule

module simpleSnakeTop(	// <stdin>:217:3
  input        clock,	// <stdin>:218:11
               reset,	// <stdin>:219:11
  input  [3:0] io_board_buttons,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:115:20
  output [6:0] io_board_segments,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:115:20
  output [3:0] io_board_anodes,	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:115:20
  output       io_board_dp	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:115:20
);

  simpleSnake game (	// C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:122:26
    .clock       (clock),
    .reset       (reset),
    .io_buttons  (io_board_buttons),
    .io_segments (io_board_segments),
    .io_anodes   (io_board_anodes)
  );
  assign io_board_dp = 1'h1;	// <stdin>:217:3, C:\\Users\\Bylue\\Desktop\\WUSTL\\DD Chisel\\repos\\chisel-basys-snake\\src\\main\\scala\\Demo\\simpleSnake.scala:122:26
endmodule

